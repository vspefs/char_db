//  char_db, the general encoding/decoding C++ library
//  Copyright (C) 2025 vspefs<vspefs@protonmail.com>
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Affero General Public License as
//  published by the Free Software Foundation, either version 3 of the
//  License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Affero General Public License for more details.
//
//  You should have received a copy of the GNU Affero General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.

#pragma once

#include <vector>
#include <array>
#include <ranges>

namespace char_db {

template <typename T, typename CharT>
  concept database_of = requires (std::vector<CharT> seq)
  {
    // static services
    requires std::same_as<typename T::char_type, CharT>;
    { T::to_code_point (seq) } -> std::same_as<char32_t>;
    { T::template code_point_to<std::vector<CharT>> (std::declval<char32_t> ()) }
      -> std::same_as<std::vector<CharT>>;
    { T::is_valid_char (seq) } -> std::same_as<bool>;

    // sequence queries
    { T::front_mblen (seq) } -> std::same_as<std::size_t>;
    { T::starts_with_valid_char (seq) } -> std::same_as<bool>;
    { T::validate_char_sequence (seq) } -> std::same_as<bool>;
  };

class utf32
{
public:
  using char_type = char32_t;

private:
  struct assigned_range_t
  {
    char_type const start;
    char_type const end;
  };

public:
  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr bool
    starts_with_valid_char (R &&seq) noexcept
    {
      if (std::ranges::empty (seq))
        return false;

      char_type const chr = *std::ranges::cbegin (seq);

      if (chr > assigned_ranges.back ().end)
        return false;

      // I hope manually writing the binary search could lower the compile time
      // iteration depth.
      //
      // If it doesn't, please tell me.

      std::size_t low = 0;
      std::size_t high = assigned_ranges.size () - 1;
      while (low <= high)
	if (std::size_t const mid = low + (high - low) / 2; chr < assigned_ranges[mid].start)
	  {
	    if (mid == 0)
	      return false;
	    high = mid - 1;
	  }
	else if (assigned_ranges[mid].end < chr)
	  low = mid + 1;
	else
	  return true;

      return false;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr std::size_t
    front_mblen (R &&seq) noexcept
    {
      if (starts_with_valid_char (std::forward<R> (seq)))
        return 1;
      else
        return 0;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr char32_t
    to_code_point (R &&seq) noexcept
    // pre (is_valid_char (seq))
    {
      return *std::ranges::begin (seq);
    }

  template <std::ranges::range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr R
    code_point_to (char32_t code_point) noexcept
    {
      return std::ranges::to<R> (std::views::single (code_point));
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr bool
    is_valid_char (R &&seq) noexcept
    {
      if (std::ranges::size (seq) == 1 && starts_with_valid_char (seq))
        return true;
      else
        return false;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr bool
    validate_char_sequence (R &&seq) noexcept
    {
      auto const sentinel = std::ranges::cend (seq);

      auto current = std::ranges::cbegin (seq);
      while (starts_with_valid_char (std::ranges::subrange (current, sentinel)))
        std::ranges::advance (current, 1);

      if (sentinel == current)
        return true;
      else
        return false;
    }

private:
  static constexpr auto assigned_ranges = std::to_array<assigned_range_t> ({
    {0x0000u, 0x0377u},
    {0x037Au, 0x037Fu},
    {0x0384u, 0x038Au},
    {0x038Cu, 0x038Cu},
    {0x038Eu, 0x03A1u},
    {0x03A3u, 0x052Fu},
    {0x0531u, 0x0556u},
    {0x0559u, 0x058Au},
    {0x058Du, 0x058Fu},
    {0x0591u, 0x05C7u},
    {0x05D0u, 0x05EAu},
    {0x05EFu, 0x05F4u},
    {0x0600u, 0x070Du},
    {0x070Fu, 0x074Au},
    {0x074Du, 0x07B1u},
    {0x07C0u, 0x07FAu},
    {0x07FDu, 0x082Du},
    {0x0830u, 0x083Eu},
    {0x0840u, 0x085Bu},
    {0x085Eu, 0x085Eu},
    {0x0860u, 0x086Au},
    {0x0870u, 0x088Eu},
    {0x0890u, 0x0891u},
    {0x0897u, 0x0983u},
    {0x0985u, 0x098Cu},
    {0x098Fu, 0x0990u},
    {0x0993u, 0x09A8u},
    {0x09AAu, 0x09B0u},
    {0x09B2u, 0x09B2u},
    {0x09B6u, 0x09B9u},
    {0x09BCu, 0x09C4u},
    {0x09C7u, 0x09C8u},
    {0x09CBu, 0x09CEu},
    {0x09D7u, 0x09D7u},
    {0x09DCu, 0x09DDu},
    {0x09DFu, 0x09E3u},
    {0x09E6u, 0x09FEu},
    {0x0A01u, 0x0A03u},
    {0x0A05u, 0x0A0Au},
    {0x0A0Fu, 0x0A10u},
    {0x0A13u, 0x0A28u},
    {0x0A2Au, 0x0A30u},
    {0x0A32u, 0x0A33u},
    {0x0A35u, 0x0A36u},
    {0x0A38u, 0x0A39u},
    {0x0A3Cu, 0x0A3Cu},
    {0x0A3Eu, 0x0A42u},
    {0x0A47u, 0x0A48u},
    {0x0A4Bu, 0x0A4Du},
    {0x0A51u, 0x0A51u},
    {0x0A59u, 0x0A5Cu},
    {0x0A5Eu, 0x0A5Eu},
    {0x0A66u, 0x0A76u},
    {0x0A81u, 0x0A83u},
    {0x0A85u, 0x0A8Du},
    {0x0A8Fu, 0x0A91u},
    {0x0A93u, 0x0AA8u},
    {0x0AAAu, 0x0AB0u},
    {0x0AB2u, 0x0AB3u},
    {0x0AB5u, 0x0AB9u},
    {0x0ABCu, 0x0AC5u},
    {0x0AC7u, 0x0AC9u},
    {0x0ACBu, 0x0ACDu},
    {0x0AD0u, 0x0AD0u},
    {0x0AE0u, 0x0AE3u},
    {0x0AE6u, 0x0AF1u},
    {0x0AF9u, 0x0AFFu},
    {0x0B01u, 0x0B03u},
    {0x0B05u, 0x0B0Cu},
    {0x0B0Fu, 0x0B10u},
    {0x0B13u, 0x0B28u},
    {0x0B2Au, 0x0B30u},
    {0x0B32u, 0x0B33u},
    {0x0B35u, 0x0B39u},
    {0x0B3Cu, 0x0B44u},
    {0x0B47u, 0x0B48u},
    {0x0B4Bu, 0x0B4Du},
    {0x0B55u, 0x0B57u},
    {0x0B5Cu, 0x0B5Du},
    {0x0B5Fu, 0x0B63u},
    {0x0B66u, 0x0B77u},
    {0x0B82u, 0x0B83u},
    {0x0B85u, 0x0B8Au},
    {0x0B8Eu, 0x0B90u},
    {0x0B92u, 0x0B95u},
    {0x0B99u, 0x0B9Au},
    {0x0B9Cu, 0x0B9Cu},
    {0x0B9Eu, 0x0B9Fu},
    {0x0BA3u, 0x0BA4u},
    {0x0BA8u, 0x0BAAu},
    {0x0BAEu, 0x0BB9u},
    {0x0BBEu, 0x0BC2u},
    {0x0BC6u, 0x0BC8u},
    {0x0BCAu, 0x0BCDu},
    {0x0BD0u, 0x0BD0u},
    {0x0BD7u, 0x0BD7u},
    {0x0BE6u, 0x0BFAu},
    {0x0C00u, 0x0C0Cu},
    {0x0C0Eu, 0x0C10u},
    {0x0C12u, 0x0C28u},
    {0x0C2Au, 0x0C39u},
    {0x0C3Cu, 0x0C44u},
    {0x0C46u, 0x0C48u},
    {0x0C4Au, 0x0C4Du},
    {0x0C55u, 0x0C56u},
    {0x0C58u, 0x0C5Au},
    {0x0C5Du, 0x0C5Du},
    {0x0C60u, 0x0C63u},
    {0x0C66u, 0x0C6Fu},
    {0x0C77u, 0x0C8Cu},
    {0x0C8Eu, 0x0C90u},
    {0x0C92u, 0x0CA8u},
    {0x0CAAu, 0x0CB3u},
    {0x0CB5u, 0x0CB9u},
    {0x0CBCu, 0x0CC4u},
    {0x0CC6u, 0x0CC8u},
    {0x0CCAu, 0x0CCDu},
    {0x0CD5u, 0x0CD6u},
    {0x0CDDu, 0x0CDEu},
    {0x0CE0u, 0x0CE3u},
    {0x0CE6u, 0x0CEFu},
    {0x0CF1u, 0x0CF3u},
    {0x0D00u, 0x0D0Cu},
    {0x0D0Eu, 0x0D10u},
    {0x0D12u, 0x0D44u},
    {0x0D46u, 0x0D48u},
    {0x0D4Au, 0x0D4Fu},
    {0x0D54u, 0x0D63u},
    {0x0D66u, 0x0D7Fu},
    {0x0D81u, 0x0D83u},
    {0x0D85u, 0x0D96u},
    {0x0D9Au, 0x0DB1u},
    {0x0DB3u, 0x0DBBu},
    {0x0DBDu, 0x0DBDu},
    {0x0DC0u, 0x0DC6u},
    {0x0DCAu, 0x0DCAu},
    {0x0DCFu, 0x0DD4u},
    {0x0DD6u, 0x0DD6u},
    {0x0DD8u, 0x0DDFu},
    {0x0DE6u, 0x0DEFu},
    {0x0DF2u, 0x0DF4u},
    {0x0E01u, 0x0E3Au},
    {0x0E3Fu, 0x0E5Bu},
    {0x0E81u, 0x0E82u},
    {0x0E84u, 0x0E84u},
    {0x0E86u, 0x0E8Au},
    {0x0E8Cu, 0x0EA3u},
    {0x0EA5u, 0x0EA5u},
    {0x0EA7u, 0x0EBDu},
    {0x0EC0u, 0x0EC4u},
    {0x0EC6u, 0x0EC6u},
    {0x0EC8u, 0x0ECEu},
    {0x0ED0u, 0x0ED9u},
    {0x0EDCu, 0x0EDFu},
    {0x0F00u, 0x0F47u},
    {0x0F49u, 0x0F6Cu},
    {0x0F71u, 0x0F97u},
    {0x0F99u, 0x0FBCu},
    {0x0FBEu, 0x0FCCu},
    {0x0FCEu, 0x0FDAu},
    {0x1000u, 0x10C5u},
    {0x10C7u, 0x10C7u},
    {0x10CDu, 0x10CDu},
    {0x10D0u, 0x1248u},
    {0x124Au, 0x124Du},
    {0x1250u, 0x1256u},
    {0x1258u, 0x1258u},
    {0x125Au, 0x125Du},
    {0x1260u, 0x1288u},
    {0x128Au, 0x128Du},
    {0x1290u, 0x12B0u},
    {0x12B2u, 0x12B5u},
    {0x12B8u, 0x12BEu},
    {0x12C0u, 0x12C0u},
    {0x12C2u, 0x12C5u},
    {0x12C8u, 0x12D6u},
    {0x12D8u, 0x1310u},
    {0x1312u, 0x1315u},
    {0x1318u, 0x135Au},
    {0x135Du, 0x137Cu},
    {0x1380u, 0x1399u},
    {0x13A0u, 0x13F5u},
    {0x13F8u, 0x13FDu},
    {0x1400u, 0x169Cu},
    {0x16A0u, 0x16F8u},
    {0x1700u, 0x1715u},
    {0x171Fu, 0x1736u},
    {0x1740u, 0x1753u},
    {0x1760u, 0x176Cu},
    {0x176Eu, 0x1770u},
    {0x1772u, 0x1773u},
    {0x1780u, 0x17DDu},
    {0x17E0u, 0x17E9u},
    {0x17F0u, 0x17F9u},
    {0x1800u, 0x1819u},
    {0x1820u, 0x1878u},
    {0x1880u, 0x18AAu},
    {0x18B0u, 0x18F5u},
    {0x1900u, 0x191Eu},
    {0x1920u, 0x192Bu},
    {0x1930u, 0x193Bu},
    {0x1940u, 0x1940u},
    {0x1944u, 0x196Du},
    {0x1970u, 0x1974u},
    {0x1980u, 0x19ABu},
    {0x19B0u, 0x19C9u},
    {0x19D0u, 0x19DAu},
    {0x19DEu, 0x1A1Bu},
    {0x1A1Eu, 0x1A5Eu},
    {0x1A60u, 0x1A7Cu},
    {0x1A7Fu, 0x1A89u},
    {0x1A90u, 0x1A99u},
    {0x1AA0u, 0x1AADu},
    {0x1AB0u, 0x1ACEu},
    {0x1B00u, 0x1B4Cu},
    {0x1B4Eu, 0x1BF3u},
    {0x1BFCu, 0x1C37u},
    {0x1C3Bu, 0x1C49u},
    {0x1C4Du, 0x1C8Au},
    {0x1C90u, 0x1CBAu},
    {0x1CBDu, 0x1CC7u},
    {0x1CD0u, 0x1CFAu},
    {0x1D00u, 0x1F15u},
    {0x1F18u, 0x1F1Du},
    {0x1F20u, 0x1F45u},
    {0x1F48u, 0x1F4Du},
    {0x1F50u, 0x1F57u},
    {0x1F59u, 0x1F59u},
    {0x1F5Bu, 0x1F5Bu},
    {0x1F5Du, 0x1F5Du},
    {0x1F5Fu, 0x1F7Du},
    {0x1F80u, 0x1FB4u},
    {0x1FB6u, 0x1FC4u},
    {0x1FC6u, 0x1FD3u},
    {0x1FD6u, 0x1FDBu},
    {0x1FDDu, 0x1FEFu},
    {0x1FF2u, 0x1FF4u},
    {0x1FF6u, 0x1FFEu},
    {0x2000u, 0x2064u},
    {0x2066u, 0x2071u},
    {0x2074u, 0x208Eu},
    {0x2090u, 0x209Cu},
    {0x20A0u, 0x20C0u},
    {0x20D0u, 0x20F0u},
    {0x2100u, 0x218Bu},
    {0x2190u, 0x2429u},
    {0x2440u, 0x244Au},
    {0x2460u, 0x2B73u},
    {0x2B76u, 0x2B95u},
    {0x2B97u, 0x2CF3u},
    {0x2CF9u, 0x2D25u},
    {0x2D27u, 0x2D27u},
    {0x2D2Du, 0x2D2Du},
    {0x2D30u, 0x2D67u},
    {0x2D6Fu, 0x2D70u},
    {0x2D7Fu, 0x2D96u},
    {0x2DA0u, 0x2DA6u},
    {0x2DA8u, 0x2DAEu},
    {0x2DB0u, 0x2DB6u},
    {0x2DB8u, 0x2DBEu},
    {0x2DC0u, 0x2DC6u},
    {0x2DC8u, 0x2DCEu},
    {0x2DD0u, 0x2DD6u},
    {0x2DD8u, 0x2DDEu},
    {0x2DE0u, 0x2E5Du},
    {0x2E80u, 0x2E99u},
    {0x2E9Bu, 0x2EF3u},
    {0x2F00u, 0x2FD5u},
    {0x2FF0u, 0x303Fu},
    {0x3041u, 0x3096u},
    {0x3099u, 0x30FFu},
    {0x3105u, 0x312Fu},
    {0x3131u, 0x318Eu},
    {0x3190u, 0x31E5u},
    {0x31EFu, 0x321Eu},
    {0x3220u, 0xA48Cu},
    {0xA490u, 0xA4C6u},
    {0xA4D0u, 0xA62Bu},
    {0xA640u, 0xA6F7u},
    {0xA700u, 0xA7CDu},
    {0xA7D0u, 0xA7D1u},
    {0xA7D3u, 0xA7D3u},
    {0xA7D5u, 0xA7DCu},
    {0xA7F2u, 0xA82Cu},
    {0xA830u, 0xA839u},
    {0xA840u, 0xA877u},
    {0xA880u, 0xA8C5u},
    {0xA8CEu, 0xA8D9u},
    {0xA8E0u, 0xA953u},
    {0xA95Fu, 0xA97Cu},
    {0xA980u, 0xA9CDu},
    {0xA9CFu, 0xA9D9u},
    {0xA9DEu, 0xA9FEu},
    {0xAA00u, 0xAA36u},
    {0xAA40u, 0xAA4Du},
    {0xAA50u, 0xAA59u},
    {0xAA5Cu, 0xAAC2u},
    {0xAADBu, 0xAAF6u},
    {0xAB01u, 0xAB06u},
    {0xAB09u, 0xAB0Eu},
    {0xAB11u, 0xAB16u},
    {0xAB20u, 0xAB26u},
    {0xAB28u, 0xAB2Eu},
    {0xAB30u, 0xAB6Bu},
    {0xAB70u, 0xABEDu},
    {0xABF0u, 0xABF9u},
    {0xAC00u, 0xD7A3u},
    {0xD7B0u, 0xD7C6u},
    {0xD7CBu, 0xD7FBu},
    {0xD800u, 0xFA6Du},
    {0xFA70u, 0xFAD9u},
    {0xFB00u, 0xFB06u},
    {0xFB13u, 0xFB17u},
    {0xFB1Du, 0xFB36u},
    {0xFB38u, 0xFB3Cu},
    {0xFB3Eu, 0xFB3Eu},
    {0xFB40u, 0xFB41u},
    {0xFB43u, 0xFB44u},
    {0xFB46u, 0xFBC2u},
    {0xFBD3u, 0xFD8Fu},
    {0xFD92u, 0xFDC7u},
    {0xFDCFu, 0xFDCFu},
    {0xFDF0u, 0xFE19u},
    {0xFE20u, 0xFE52u},
    {0xFE54u, 0xFE66u},
    {0xFE68u, 0xFE6Bu},
    {0xFE70u, 0xFE74u},
    {0xFE76u, 0xFEFCu},
    {0xFEFFu, 0xFEFFu},
    {0xFF01u, 0xFFBEu},
    {0xFFC2u, 0xFFC7u},
    {0xFFCAu, 0xFFCFu},
    {0xFFD2u, 0xFFD7u},
    {0xFFDAu, 0xFFDCu},
    {0xFFE0u, 0xFFE6u},
    {0xFFE8u, 0xFFEEu},
    {0xFFF9u, 0xFFFDu},
    {0x10000u, 0x1000Bu},
    {0x1000Du, 0x10026u},
    {0x10028u, 0x1003Au},
    {0x1003Cu, 0x1003Du},
    {0x1003Fu, 0x1004Du},
    {0x10050u, 0x1005Du},
    {0x10080u, 0x100FAu},
    {0x10100u, 0x10102u},
    {0x10107u, 0x10133u},
    {0x10137u, 0x1018Eu},
    {0x10190u, 0x1019Cu},
    {0x101A0u, 0x101A0u},
    {0x101D0u, 0x101FDu},
    {0x10280u, 0x1029Cu},
    {0x102A0u, 0x102D0u},
    {0x102E0u, 0x102FBu},
    {0x10300u, 0x10323u},
    {0x1032Du, 0x1034Au},
    {0x10350u, 0x1037Au},
    {0x10380u, 0x1039Du},
    {0x1039Fu, 0x103C3u},
    {0x103C8u, 0x103D5u},
    {0x10400u, 0x1049Du},
    {0x104A0u, 0x104A9u},
    {0x104B0u, 0x104D3u},
    {0x104D8u, 0x104FBu},
    {0x10500u, 0x10527u},
    {0x10530u, 0x10563u},
    {0x1056Fu, 0x1057Au},
    {0x1057Cu, 0x1058Au},
    {0x1058Cu, 0x10592u},
    {0x10594u, 0x10595u},
    {0x10597u, 0x105A1u},
    {0x105A3u, 0x105B1u},
    {0x105B3u, 0x105B9u},
    {0x105BBu, 0x105BCu},
    {0x105C0u, 0x105F3u},
    {0x10600u, 0x10736u},
    {0x10740u, 0x10755u},
    {0x10760u, 0x10767u},
    {0x10780u, 0x10785u},
    {0x10787u, 0x107B0u},
    {0x107B2u, 0x107BAu},
    {0x10800u, 0x10805u},
    {0x10808u, 0x10808u},
    {0x1080Au, 0x10835u},
    {0x10837u, 0x10838u},
    {0x1083Cu, 0x1083Cu},
    {0x1083Fu, 0x10855u},
    {0x10857u, 0x1089Eu},
    {0x108A7u, 0x108AFu},
    {0x108E0u, 0x108F2u},
    {0x108F4u, 0x108F5u},
    {0x108FBu, 0x1091Bu},
    {0x1091Fu, 0x10939u},
    {0x1093Fu, 0x1093Fu},
    {0x10980u, 0x109B7u},
    {0x109BCu, 0x109CFu},
    {0x109D2u, 0x10A03u},
    {0x10A05u, 0x10A06u},
    {0x10A0Cu, 0x10A13u},
    {0x10A15u, 0x10A17u},
    {0x10A19u, 0x10A35u},
    {0x10A38u, 0x10A3Au},
    {0x10A3Fu, 0x10A48u},
    {0x10A50u, 0x10A58u},
    {0x10A60u, 0x10A9Fu},
    {0x10AC0u, 0x10AE6u},
    {0x10AEBu, 0x10AF6u},
    {0x10B00u, 0x10B35u},
    {0x10B39u, 0x10B55u},
    {0x10B58u, 0x10B72u},
    {0x10B78u, 0x10B91u},
    {0x10B99u, 0x10B9Cu},
    {0x10BA9u, 0x10BAFu},
    {0x10C00u, 0x10C48u},
    {0x10C80u, 0x10CB2u},
    {0x10CC0u, 0x10CF2u},
    {0x10CFAu, 0x10D27u},
    {0x10D30u, 0x10D39u},
    {0x10D40u, 0x10D65u},
    {0x10D69u, 0x10D85u},
    {0x10D8Eu, 0x10D8Fu},
    {0x10E60u, 0x10E7Eu},
    {0x10E80u, 0x10EA9u},
    {0x10EABu, 0x10EADu},
    {0x10EB0u, 0x10EB1u},
    {0x10EC2u, 0x10EC4u},
    {0x10EFCu, 0x10F27u},
    {0x10F30u, 0x10F59u},
    {0x10F70u, 0x10F89u},
    {0x10FB0u, 0x10FCBu},
    {0x10FE0u, 0x10FF6u},
    {0x11000u, 0x1104Du},
    {0x11052u, 0x11075u},
    {0x1107Fu, 0x110C2u},
    {0x110CDu, 0x110CDu},
    {0x110D0u, 0x110E8u},
    {0x110F0u, 0x110F9u},
    {0x11100u, 0x11134u},
    {0x11136u, 0x11147u},
    {0x11150u, 0x11176u},
    {0x11180u, 0x111DFu},
    {0x111E1u, 0x111F4u},
    {0x11200u, 0x11211u},
    {0x11213u, 0x11241u},
    {0x11280u, 0x11286u},
    {0x11288u, 0x11288u},
    {0x1128Au, 0x1128Du},
    {0x1128Fu, 0x1129Du},
    {0x1129Fu, 0x112A9u},
    {0x112B0u, 0x112EAu},
    {0x112F0u, 0x112F9u},
    {0x11300u, 0x11303u},
    {0x11305u, 0x1130Cu},
    {0x1130Fu, 0x11310u},
    {0x11313u, 0x11328u},
    {0x1132Au, 0x11330u},
    {0x11332u, 0x11333u},
    {0x11335u, 0x11339u},
    {0x1133Bu, 0x11344u},
    {0x11347u, 0x11348u},
    {0x1134Bu, 0x1134Du},
    {0x11350u, 0x11350u},
    {0x11357u, 0x11357u},
    {0x1135Du, 0x11363u},
    {0x11366u, 0x1136Cu},
    {0x11370u, 0x11374u},
    {0x11380u, 0x11389u},
    {0x1138Bu, 0x1138Bu},
    {0x1138Eu, 0x1138Eu},
    {0x11390u, 0x113B5u},
    {0x113B7u, 0x113C0u},
    {0x113C2u, 0x113C2u},
    {0x113C5u, 0x113C5u},
    {0x113C7u, 0x113CAu},
    {0x113CCu, 0x113D5u},
    {0x113D7u, 0x113D8u},
    {0x113E1u, 0x113E2u},
    {0x11400u, 0x1145Bu},
    {0x1145Du, 0x11461u},
    {0x11480u, 0x114C7u},
    {0x114D0u, 0x114D9u},
    {0x11580u, 0x115B5u},
    {0x115B8u, 0x115DDu},
    {0x11600u, 0x11644u},
    {0x11650u, 0x11659u},
    {0x11660u, 0x1166Cu},
    {0x11680u, 0x116B9u},
    {0x116C0u, 0x116C9u},
    {0x116D0u, 0x116E3u},
    {0x11700u, 0x1171Au},
    {0x1171Du, 0x1172Bu},
    {0x11730u, 0x11746u},
    {0x11800u, 0x1183Bu},
    {0x118A0u, 0x118F2u},
    {0x118FFu, 0x11906u},
    {0x11909u, 0x11909u},
    {0x1190Cu, 0x11913u},
    {0x11915u, 0x11916u},
    {0x11918u, 0x11935u},
    {0x11937u, 0x11938u},
    {0x1193Bu, 0x11946u},
    {0x11950u, 0x11959u},
    {0x119A0u, 0x119A7u},
    {0x119AAu, 0x119D7u},
    {0x119DAu, 0x119E4u},
    {0x11A00u, 0x11A47u},
    {0x11A50u, 0x11AA2u},
    {0x11AB0u, 0x11AF8u},
    {0x11B00u, 0x11B09u},
    {0x11BC0u, 0x11BE1u},
    {0x11BF0u, 0x11BF9u},
    {0x11C00u, 0x11C08u},
    {0x11C0Au, 0x11C36u},
    {0x11C38u, 0x11C45u},
    {0x11C50u, 0x11C6Cu},
    {0x11C70u, 0x11C8Fu},
    {0x11C92u, 0x11CA7u},
    {0x11CA9u, 0x11CB6u},
    {0x11D00u, 0x11D06u},
    {0x11D08u, 0x11D09u},
    {0x11D0Bu, 0x11D36u},
    {0x11D3Au, 0x11D3Au},
    {0x11D3Cu, 0x11D3Du},
    {0x11D3Fu, 0x11D47u},
    {0x11D50u, 0x11D59u},
    {0x11D60u, 0x11D65u},
    {0x11D67u, 0x11D68u},
    {0x11D6Au, 0x11D8Eu},
    {0x11D90u, 0x11D91u},
    {0x11D93u, 0x11D98u},
    {0x11DA0u, 0x11DA9u},
    {0x11EE0u, 0x11EF8u},
    {0x11F00u, 0x11F10u},
    {0x11F12u, 0x11F3Au},
    {0x11F3Eu, 0x11F5Au},
    {0x11FB0u, 0x11FB0u},
    {0x11FC0u, 0x11FF1u},
    {0x11FFFu, 0x12399u},
    {0x12400u, 0x1246Eu},
    {0x12470u, 0x12474u},
    {0x12480u, 0x12543u},
    {0x12F90u, 0x12FF2u},
    {0x13000u, 0x13455u},
    {0x13460u, 0x143FAu},
    {0x14400u, 0x14646u},
    {0x16100u, 0x16139u},
    {0x16800u, 0x16A38u},
    {0x16A40u, 0x16A5Eu},
    {0x16A60u, 0x16A69u},
    {0x16A6Eu, 0x16ABEu},
    {0x16AC0u, 0x16AC9u},
    {0x16AD0u, 0x16AEDu},
    {0x16AF0u, 0x16AF5u},
    {0x16B00u, 0x16B45u},
    {0x16B50u, 0x16B59u},
    {0x16B5Bu, 0x16B61u},
    {0x16B63u, 0x16B77u},
    {0x16B7Du, 0x16B8Fu},
    {0x16D40u, 0x16D79u},
    {0x16E40u, 0x16E9Au},
    {0x16F00u, 0x16F4Au},
    {0x16F4Fu, 0x16F87u},
    {0x16F8Fu, 0x16F9Fu},
    {0x16FE0u, 0x16FE4u},
    {0x16FF0u, 0x16FF1u},
    {0x17000u, 0x187F7u},
    {0x18800u, 0x18CD5u},
    {0x18CFFu, 0x18D08u},
    {0x1AFF0u, 0x1AFF3u},
    {0x1AFF5u, 0x1AFFBu},
    {0x1AFFDu, 0x1AFFEu},
    {0x1B000u, 0x1B122u},
    {0x1B132u, 0x1B132u},
    {0x1B150u, 0x1B152u},
    {0x1B155u, 0x1B155u},
    {0x1B164u, 0x1B167u},
    {0x1B170u, 0x1B2FBu},
    {0x1BC00u, 0x1BC6Au},
    {0x1BC70u, 0x1BC7Cu},
    {0x1BC80u, 0x1BC88u},
    {0x1BC90u, 0x1BC99u},
    {0x1BC9Cu, 0x1BCA3u},
    {0x1CC00u, 0x1CCF9u},
    {0x1CD00u, 0x1CEB3u},
    {0x1CF00u, 0x1CF2Du},
    {0x1CF30u, 0x1CF46u},
    {0x1CF50u, 0x1CFC3u},
    {0x1D000u, 0x1D0F5u},
    {0x1D100u, 0x1D126u},
    {0x1D129u, 0x1D1EAu},
    {0x1D200u, 0x1D245u},
    {0x1D2C0u, 0x1D2D3u},
    {0x1D2E0u, 0x1D2F3u},
    {0x1D300u, 0x1D356u},
    {0x1D360u, 0x1D378u},
    {0x1D400u, 0x1D454u},
    {0x1D456u, 0x1D49Cu},
    {0x1D49Eu, 0x1D49Fu},
    {0x1D4A2u, 0x1D4A2u},
    {0x1D4A5u, 0x1D4A6u},
    {0x1D4A9u, 0x1D4ACu},
    {0x1D4AEu, 0x1D4B9u},
    {0x1D4BBu, 0x1D4BBu},
    {0x1D4BDu, 0x1D4C3u},
    {0x1D4C5u, 0x1D505u},
    {0x1D507u, 0x1D50Au},
    {0x1D50Du, 0x1D514u},
    {0x1D516u, 0x1D51Cu},
    {0x1D51Eu, 0x1D539u},
    {0x1D53Bu, 0x1D53Eu},
    {0x1D540u, 0x1D544u},
    {0x1D546u, 0x1D546u},
    {0x1D54Au, 0x1D550u},
    {0x1D552u, 0x1D6A5u},
    {0x1D6A8u, 0x1D7CBu},
    {0x1D7CEu, 0x1DA8Bu},
    {0x1DA9Bu, 0x1DA9Fu},
    {0x1DAA1u, 0x1DAAFu},
    {0x1DF00u, 0x1DF1Eu},
    {0x1DF25u, 0x1DF2Au},
    {0x1E000u, 0x1E006u},
    {0x1E008u, 0x1E018u},
    {0x1E01Bu, 0x1E021u},
    {0x1E023u, 0x1E024u},
    {0x1E026u, 0x1E02Au},
    {0x1E030u, 0x1E06Du},
    {0x1E08Fu, 0x1E08Fu},
    {0x1E100u, 0x1E12Cu},
    {0x1E130u, 0x1E13Du},
    {0x1E140u, 0x1E149u},
    {0x1E14Eu, 0x1E14Fu},
    {0x1E290u, 0x1E2AEu},
    {0x1E2C0u, 0x1E2F9u},
    {0x1E2FFu, 0x1E2FFu},
    {0x1E4D0u, 0x1E4F9u},
    {0x1E5D0u, 0x1E5FAu},
    {0x1E5FFu, 0x1E5FFu},
    {0x1E7E0u, 0x1E7E6u},
    {0x1E7E8u, 0x1E7EBu},
    {0x1E7EDu, 0x1E7EEu},
    {0x1E7F0u, 0x1E7FEu},
    {0x1E800u, 0x1E8C4u},
    {0x1E8C7u, 0x1E8D6u},
    {0x1E900u, 0x1E94Bu},
    {0x1E950u, 0x1E959u},
    {0x1E95Eu, 0x1E95Fu},
    {0x1EC71u, 0x1ECB4u},
    {0x1ED01u, 0x1ED3Du},
    {0x1EE00u, 0x1EE03u},
    {0x1EE05u, 0x1EE1Fu},
    {0x1EE21u, 0x1EE22u},
    {0x1EE24u, 0x1EE24u},
    {0x1EE27u, 0x1EE27u},
    {0x1EE29u, 0x1EE32u},
    {0x1EE34u, 0x1EE37u},
    {0x1EE39u, 0x1EE39u},
    {0x1EE3Bu, 0x1EE3Bu},
    {0x1EE42u, 0x1EE42u},
    {0x1EE47u, 0x1EE47u},
    {0x1EE49u, 0x1EE49u},
    {0x1EE4Bu, 0x1EE4Bu},
    {0x1EE4Du, 0x1EE4Fu},
    {0x1EE51u, 0x1EE52u},
    {0x1EE54u, 0x1EE54u},
    {0x1EE57u, 0x1EE57u},
    {0x1EE59u, 0x1EE59u},
    {0x1EE5Bu, 0x1EE5Bu},
    {0x1EE5Du, 0x1EE5Du},
    {0x1EE5Fu, 0x1EE5Fu},
    {0x1EE61u, 0x1EE62u},
    {0x1EE64u, 0x1EE64u},
    {0x1EE67u, 0x1EE6Au},
    {0x1EE6Cu, 0x1EE72u},
    {0x1EE74u, 0x1EE77u},
    {0x1EE79u, 0x1EE7Cu},
    {0x1EE7Eu, 0x1EE7Eu},
    {0x1EE80u, 0x1EE89u},
    {0x1EE8Bu, 0x1EE9Bu},
    {0x1EEA1u, 0x1EEA3u},
    {0x1EEA5u, 0x1EEA9u},
    {0x1EEABu, 0x1EEBBu},
    {0x1EEF0u, 0x1EEF1u},
    {0x1F000u, 0x1F02Bu},
    {0x1F030u, 0x1F093u},
    {0x1F0A0u, 0x1F0AEu},
    {0x1F0B1u, 0x1F0BFu},
    {0x1F0C1u, 0x1F0CFu},
    {0x1F0D1u, 0x1F0F5u},
    {0x1F100u, 0x1F1ADu},
    {0x1F1E6u, 0x1F202u},
    {0x1F210u, 0x1F23Bu},
    {0x1F240u, 0x1F248u},
    {0x1F250u, 0x1F251u},
    {0x1F260u, 0x1F265u},
    {0x1F300u, 0x1F6D7u},
    {0x1F6DCu, 0x1F6ECu},
    {0x1F6F0u, 0x1F6FCu},
    {0x1F700u, 0x1F776u},
    {0x1F77Bu, 0x1F7D9u},
    {0x1F7E0u, 0x1F7EBu},
    {0x1F7F0u, 0x1F7F0u},
    {0x1F800u, 0x1F80Bu},
    {0x1F810u, 0x1F847u},
    {0x1F850u, 0x1F859u},
    {0x1F860u, 0x1F887u},
    {0x1F890u, 0x1F8ADu},
    {0x1F8B0u, 0x1F8BBu},
    {0x1F8C0u, 0x1F8C1u},
    {0x1F900u, 0x1FA53u},
    {0x1FA60u, 0x1FA6Du},
    {0x1FA70u, 0x1FA7Cu},
    {0x1FA80u, 0x1FA89u},
    {0x1FA8Fu, 0x1FAC6u},
    {0x1FACEu, 0x1FADCu},
    {0x1FADFu, 0x1FAE9u},
    {0x1FAF0u, 0x1FAF8u},
    {0x1FB00u, 0x1FB92u},
    {0x1FB94u, 0x1FBF9u},
    {0x20000u, 0x2A6DFu},
    {0x2A700u, 0x2B739u},
    {0x2B740u, 0x2B81Du},
    {0x2B820u, 0x2CEA1u},
    {0x2CEB0u, 0x2EBE0u},
    {0x2EBF0u, 0x2EE5Du},
    {0x2F800u, 0x2FA1Du},
    {0x30000u, 0x3134Au},
    {0x31350u, 0x323AFu},
    {0xE0001u, 0xE0001u},
    {0xE0020u, 0xE007Fu},
    {0xE0100u, 0xE01EFu},
    {0xF0000u, 0xFFFFDu},
    {0x100000u, 0x10FFFDu} });
};

class utf16
{
public:
  using char_type = char16_t;

private:
  struct assigned_range_t
  {
    char32_t const start;
    char32_t const end;
  };
  struct surrogate_range_t
  {
    char16_t const start;
    char16_t const end;
  };

public:
  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr std::size_t
    front_mblen (R &&seq) noexcept
    {
      if (std::ranges::empty (seq))
        return 0;
      else if (auto const code_unit = *std::ranges::cbegin (seq);
               is_high_surrogate (code_unit))
        {
          if (std::ranges::size (seq) == 1)
            return 0;

          char32_t const code_point = surrogate_pair_to_code_point (
            *std::ranges::cbegin (seq),
            *std::ranges::next (std::ranges::cbegin (seq)) );

          return is_non_bmp_code_point (code_point) ? 2 : 0;
        }
      else
        return is_bmp_code_point (code_unit) ? 1 : 0;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr bool
    starts_with_valid_char (R &&seq) noexcept
    {
      if (front_mblen (seq) == 0)
        return false;
      else
        return true;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr bool
    validate_char_sequence (R &&seq) noexcept
    {
      auto const sentinel = std::ranges::cend (seq);
      auto current = std::ranges::cbegin (seq);

      for (auto mblen = front_mblen (seq);
           0 != mblen;
           mblen = front_mblen (std::ranges::subrange (current, sentinel)))
        std::ranges::advance (current, mblen);

      if (current != sentinel)
        return false;
      else
        return true;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr bool
    is_valid_char (R &&seq) noexcept
    {
      if (std::ranges::empty (seq))
        return false;
      else if (auto const code_unit = *std::ranges::cbegin (seq);
               is_high_surrogate (code_unit))
        {
          if (std::ranges::size (seq) == 1)
            return false;

          char32_t const code_point = surrogate_pair_to_code_point (
            *std::ranges::cbegin (seq),
            *std::ranges::next (std::ranges::cbegin (seq)) );

          return is_non_bmp_code_point (code_point);
        }
      else
        return is_bmp_code_point (code_unit);
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr char32_t
    to_code_point (R &&seq) noexcept
    // pre (is_valid_char (seq))
    {
      if (auto const code_unit = *std::ranges::cbegin (seq);
          is_high_surrogate (code_unit))
        return surrogate_pair_to_code_point (code_unit,
                                             *std::ranges::next (std::ranges::cbegin (seq)));
      else
        return static_cast<char32_t> (code_unit);
    }

  template <std::ranges::range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr R
    code_point_to (char32_t const code_point) noexcept
    // precondition: `code_point` is a valid Unicode code point convertible to
    //               a UTF-16 representation
    {
      // TODO: `const` or not? `std::move (arr)` later or not?
      auto const arr = code_point_to_surrogate_pair (code_point);
      return std::ranges::to<R> (arr | std::views::take (is_bmp_code_point (code_point) ? 1 : 2));
    }

  //== UTF-16 specific operations ==//

  static constexpr char32_t
  surrogate_pair_to_code_point (char16_t const high,
                                char16_t const low) noexcept
  {
    return (static_cast<char32_t> (high - high_surrogate_range.start) << 10)
           | static_cast<char32_t> (low - low_surrogate_range.start)
           + 0x10000U;
  }

  static constexpr std::array<char16_t, 2>
  code_point_to_surrogate_pair (char32_t code_point) noexcept
  {
    code_point -= 0x10000;
    return std::to_array ({ static_cast<char16_t> ((code_point >> 10) + high_surrogate_range.start),
                            static_cast<char16_t> ((code_point & 0x3FF) + low_surrogate_range.start) });
  }

  static constexpr bool
  is_high_surrogate (char16_t const code_unit) noexcept
  {
    return high_surrogate_range.start <= code_unit && code_unit <= high_surrogate_range.end;
  }

  static constexpr bool
  is_low_surrogate (char16_t const code_unit) noexcept
  {
    return low_surrogate_range.start <= code_unit && code_unit <= low_surrogate_range.end;
  }

  static constexpr bool
  is_bmp_code_point (char32_t const code_point) noexcept
  {
    std::size_t low = 0;
    std::size_t high = bmp_assigned_ranges.size () - 1;
    while (low <= high)
      if (std::size_t const mid = low + (high - low) / 2; code_point < bmp_assigned_ranges[mid].start)
        {
          if (mid == 0)
            return false;
          high = mid - 1;
        }
      else if (bmp_assigned_ranges[mid].end < code_point)
        low = mid + 1;
      else
        return true;

    return false;
  }

  static constexpr bool
  is_non_bmp_code_point (char32_t const code_point) noexcept
  {
    std::size_t low = 0;
    std::size_t high = non_bmp_assigned_ranges.size () - 1;
    while (low <= high)
      if (std::size_t const mid = low + (high - low) / 2; code_point < non_bmp_assigned_ranges[mid].start)
        {
          if (mid == 0)
            return false;
          high = mid - 1;
        }
      else if (non_bmp_assigned_ranges[mid].end < code_point)
        low = mid + 1;
      else
        return true;

    return false;
  }

private:
  static constexpr auto bmp_assigned_ranges = std::to_array<assigned_range_t> ({
    {0x0000u, 0x0377u},
    {0x037Au, 0x037Fu},
    {0x0384u, 0x038Au},
    {0x038Cu, 0x038Cu},
    {0x038Eu, 0x03A1u},
    {0x03A3u, 0x052Fu},
    {0x0531u, 0x0556u},
    {0x0559u, 0x058Au},
    {0x058Du, 0x058Fu},
    {0x0591u, 0x05C7u},
    {0x05D0u, 0x05EAu},
    {0x05EFu, 0x05F4u},
    {0x0600u, 0x070Du},
    {0x070Fu, 0x074Au},
    {0x074Du, 0x07B1u},
    {0x07C0u, 0x07FAu},
    {0x07FDu, 0x082Du},
    {0x0830u, 0x083Eu},
    {0x0840u, 0x085Bu},
    {0x085Eu, 0x085Eu},
    {0x0860u, 0x086Au},
    {0x0870u, 0x088Eu},
    {0x0890u, 0x0891u},
    {0x0897u, 0x0983u},
    {0x0985u, 0x098Cu},
    {0x098Fu, 0x0990u},
    {0x0993u, 0x09A8u},
    {0x09AAu, 0x09B0u},
    {0x09B2u, 0x09B2u},
    {0x09B6u, 0x09B9u},
    {0x09BCu, 0x09C4u},
    {0x09C7u, 0x09C8u},
    {0x09CBu, 0x09CEu},
    {0x09D7u, 0x09D7u},
    {0x09DCu, 0x09DDu},
    {0x09DFu, 0x09E3u},
    {0x09E6u, 0x09FEu},
    {0x0A01u, 0x0A03u},
    {0x0A05u, 0x0A0Au},
    {0x0A0Fu, 0x0A10u},
    {0x0A13u, 0x0A28u},
    {0x0A2Au, 0x0A30u},
    {0x0A32u, 0x0A33u},
    {0x0A35u, 0x0A36u},
    {0x0A38u, 0x0A39u},
    {0x0A3Cu, 0x0A3Cu},
    {0x0A3Eu, 0x0A42u},
    {0x0A47u, 0x0A48u},
    {0x0A4Bu, 0x0A4Du},
    {0x0A51u, 0x0A51u},
    {0x0A59u, 0x0A5Cu},
    {0x0A5Eu, 0x0A5Eu},
    {0x0A66u, 0x0A76u},
    {0x0A81u, 0x0A83u},
    {0x0A85u, 0x0A8Du},
    {0x0A8Fu, 0x0A91u},
    {0x0A93u, 0x0AA8u},
    {0x0AAAu, 0x0AB0u},
    {0x0AB2u, 0x0AB3u},
    {0x0AB5u, 0x0AB9u},
    {0x0ABCu, 0x0AC5u},
    {0x0AC7u, 0x0AC9u},
    {0x0ACBu, 0x0ACDu},
    {0x0AD0u, 0x0AD0u},
    {0x0AE0u, 0x0AE3u},
    {0x0AE6u, 0x0AF1u},
    {0x0AF9u, 0x0AFFu},
    {0x0B01u, 0x0B03u},
    {0x0B05u, 0x0B0Cu},
    {0x0B0Fu, 0x0B10u},
    {0x0B13u, 0x0B28u},
    {0x0B2Au, 0x0B30u},
    {0x0B32u, 0x0B33u},
    {0x0B35u, 0x0B39u},
    {0x0B3Cu, 0x0B44u},
    {0x0B47u, 0x0B48u},
    {0x0B4Bu, 0x0B4Du},
    {0x0B55u, 0x0B57u},
    {0x0B5Cu, 0x0B5Du},
    {0x0B5Fu, 0x0B63u},
    {0x0B66u, 0x0B77u},
    {0x0B82u, 0x0B83u},
    {0x0B85u, 0x0B8Au},
    {0x0B8Eu, 0x0B90u},
    {0x0B92u, 0x0B95u},
    {0x0B99u, 0x0B9Au},
    {0x0B9Cu, 0x0B9Cu},
    {0x0B9Eu, 0x0B9Fu},
    {0x0BA3u, 0x0BA4u},
    {0x0BA8u, 0x0BAAu},
    {0x0BAEu, 0x0BB9u},
    {0x0BBEu, 0x0BC2u},
    {0x0BC6u, 0x0BC8u},
    {0x0BCAu, 0x0BCDu},
    {0x0BD0u, 0x0BD0u},
    {0x0BD7u, 0x0BD7u},
    {0x0BE6u, 0x0BFAu},
    {0x0C00u, 0x0C0Cu},
    {0x0C0Eu, 0x0C10u},
    {0x0C12u, 0x0C28u},
    {0x0C2Au, 0x0C39u},
    {0x0C3Cu, 0x0C44u},
    {0x0C46u, 0x0C48u},
    {0x0C4Au, 0x0C4Du},
    {0x0C55u, 0x0C56u},
    {0x0C58u, 0x0C5Au},
    {0x0C5Du, 0x0C5Du},
    {0x0C60u, 0x0C63u},
    {0x0C66u, 0x0C6Fu},
    {0x0C77u, 0x0C8Cu},
    {0x0C8Eu, 0x0C90u},
    {0x0C92u, 0x0CA8u},
    {0x0CAAu, 0x0CB3u},
    {0x0CB5u, 0x0CB9u},
    {0x0CBCu, 0x0CC4u},
    {0x0CC6u, 0x0CC8u},
    {0x0CCAu, 0x0CCDu},
    {0x0CD5u, 0x0CD6u},
    {0x0CDDu, 0x0CDEu},
    {0x0CE0u, 0x0CE3u},
    {0x0CE6u, 0x0CEFu},
    {0x0CF1u, 0x0CF3u},
    {0x0D00u, 0x0D0Cu},
    {0x0D0Eu, 0x0D10u},
    {0x0D12u, 0x0D44u},
    {0x0D46u, 0x0D48u},
    {0x0D4Au, 0x0D4Fu},
    {0x0D54u, 0x0D63u},
    {0x0D66u, 0x0D7Fu},
    {0x0D81u, 0x0D83u},
    {0x0D85u, 0x0D96u},
    {0x0D9Au, 0x0DB1u},
    {0x0DB3u, 0x0DBBu},
    {0x0DBDu, 0x0DBDu},
    {0x0DC0u, 0x0DC6u},
    {0x0DCAu, 0x0DCAu},
    {0x0DCFu, 0x0DD4u},
    {0x0DD6u, 0x0DD6u},
    {0x0DD8u, 0x0DDFu},
    {0x0DE6u, 0x0DEFu},
    {0x0DF2u, 0x0DF4u},
    {0x0E01u, 0x0E3Au},
    {0x0E3Fu, 0x0E5Bu},
    {0x0E81u, 0x0E82u},
    {0x0E84u, 0x0E84u},
    {0x0E86u, 0x0E8Au},
    {0x0E8Cu, 0x0EA3u},
    {0x0EA5u, 0x0EA5u},
    {0x0EA7u, 0x0EBDu},
    {0x0EC0u, 0x0EC4u},
    {0x0EC6u, 0x0EC6u},
    {0x0EC8u, 0x0ECEu},
    {0x0ED0u, 0x0ED9u},
    {0x0EDCu, 0x0EDFu},
    {0x0F00u, 0x0F47u},
    {0x0F49u, 0x0F6Cu},
    {0x0F71u, 0x0F97u},
    {0x0F99u, 0x0FBCu},
    {0x0FBEu, 0x0FCCu},
    {0x0FCEu, 0x0FDAu},
    {0x1000u, 0x10C5u},
    {0x10C7u, 0x10C7u},
    {0x10CDu, 0x10CDu},
    {0x10D0u, 0x1248u},
    {0x124Au, 0x124Du},
    {0x1250u, 0x1256u},
    {0x1258u, 0x1258u},
    {0x125Au, 0x125Du},
    {0x1260u, 0x1288u},
    {0x128Au, 0x128Du},
    {0x1290u, 0x12B0u},
    {0x12B2u, 0x12B5u},
    {0x12B8u, 0x12BEu},
    {0x12C0u, 0x12C0u},
    {0x12C2u, 0x12C5u},
    {0x12C8u, 0x12D6u},
    {0x12D8u, 0x1310u},
    {0x1312u, 0x1315u},
    {0x1318u, 0x135Au},
    {0x135Du, 0x137Cu},
    {0x1380u, 0x1399u},
    {0x13A0u, 0x13F5u},
    {0x13F8u, 0x13FDu},
    {0x1400u, 0x169Cu},
    {0x16A0u, 0x16F8u},
    {0x1700u, 0x1715u},
    {0x171Fu, 0x1736u},
    {0x1740u, 0x1753u},
    {0x1760u, 0x176Cu},
    {0x176Eu, 0x1770u},
    {0x1772u, 0x1773u},
    {0x1780u, 0x17DDu},
    {0x17E0u, 0x17E9u},
    {0x17F0u, 0x17F9u},
    {0x1800u, 0x1819u},
    {0x1820u, 0x1878u},
    {0x1880u, 0x18AAu},
    {0x18B0u, 0x18F5u},
    {0x1900u, 0x191Eu},
    {0x1920u, 0x192Bu},
    {0x1930u, 0x193Bu},
    {0x1940u, 0x1940u},
    {0x1944u, 0x196Du},
    {0x1970u, 0x1974u},
    {0x1980u, 0x19ABu},
    {0x19B0u, 0x19C9u},
    {0x19D0u, 0x19DAu},
    {0x19DEu, 0x1A1Bu},
    {0x1A1Eu, 0x1A5Eu},
    {0x1A60u, 0x1A7Cu},
    {0x1A7Fu, 0x1A89u},
    {0x1A90u, 0x1A99u},
    {0x1AA0u, 0x1AADu},
    {0x1AB0u, 0x1ACEu},
    {0x1B00u, 0x1B4Cu},
    {0x1B4Eu, 0x1BF3u},
    {0x1BFCu, 0x1C37u},
    {0x1C3Bu, 0x1C49u},
    {0x1C4Du, 0x1C8Au},
    {0x1C90u, 0x1CBAu},
    {0x1CBDu, 0x1CC7u},
    {0x1CD0u, 0x1CFAu},
    {0x1D00u, 0x1F15u},
    {0x1F18u, 0x1F1Du},
    {0x1F20u, 0x1F45u},
    {0x1F48u, 0x1F4Du},
    {0x1F50u, 0x1F57u},
    {0x1F59u, 0x1F59u},
    {0x1F5Bu, 0x1F5Bu},
    {0x1F5Du, 0x1F5Du},
    {0x1F5Fu, 0x1F7Du},
    {0x1F80u, 0x1FB4u},
    {0x1FB6u, 0x1FC4u},
    {0x1FC6u, 0x1FD3u},
    {0x1FD6u, 0x1FDBu},
    {0x1FDDu, 0x1FEFu},
    {0x1FF2u, 0x1FF4u},
    {0x1FF6u, 0x1FFEu},
    {0x2000u, 0x2064u},
    {0x2066u, 0x2071u},
    {0x2074u, 0x208Eu},
    {0x2090u, 0x209Cu},
    {0x20A0u, 0x20C0u},
    {0x20D0u, 0x20F0u},
    {0x2100u, 0x218Bu},
    {0x2190u, 0x2429u},
    {0x2440u, 0x244Au},
    {0x2460u, 0x2B73u},
    {0x2B76u, 0x2B95u},
    {0x2B97u, 0x2CF3u},
    {0x2CF9u, 0x2D25u},
    {0x2D27u, 0x2D27u},
    {0x2D2Du, 0x2D2Du},
    {0x2D30u, 0x2D67u},
    {0x2D6Fu, 0x2D70u},
    {0x2D7Fu, 0x2D96u},
    {0x2DA0u, 0x2DA6u},
    {0x2DA8u, 0x2DAEu},
    {0x2DB0u, 0x2DB6u},
    {0x2DB8u, 0x2DBEu},
    {0x2DC0u, 0x2DC6u},
    {0x2DC8u, 0x2DCEu},
    {0x2DD0u, 0x2DD6u},
    {0x2DD8u, 0x2DDEu},
    {0x2DE0u, 0x2E5Du},
    {0x2E80u, 0x2E99u},
    {0x2E9Bu, 0x2EF3u},
    {0x2F00u, 0x2FD5u},
    {0x2FF0u, 0x303Fu},
    {0x3041u, 0x3096u},
    {0x3099u, 0x30FFu},
    {0x3105u, 0x312Fu},
    {0x3131u, 0x318Eu},
    {0x3190u, 0x31E5u},
    {0x31EFu, 0x321Eu},
    {0x3220u, 0xA48Cu},
    {0xA490u, 0xA4C6u},
    {0xA4D0u, 0xA62Bu},
    {0xA640u, 0xA6F7u},
    {0xA700u, 0xA7CDu},
    {0xA7D0u, 0xA7D1u},
    {0xA7D3u, 0xA7D3u},
    {0xA7D5u, 0xA7DCu},
    {0xA7F2u, 0xA82Cu},
    {0xA830u, 0xA839u},
    {0xA840u, 0xA877u},
    {0xA880u, 0xA8C5u},
    {0xA8CEu, 0xA8D9u},
    {0xA8E0u, 0xA953u},
    {0xA95Fu, 0xA97Cu},
    {0xA980u, 0xA9CDu},
    {0xA9CFu, 0xA9D9u},
    {0xA9DEu, 0xA9FEu},
    {0xAA00u, 0xAA36u},
    {0xAA40u, 0xAA4Du},
    {0xAA50u, 0xAA59u},
    {0xAA5Cu, 0xAAC2u},
    {0xAADBu, 0xAAF6u},
    {0xAB01u, 0xAB06u},
    {0xAB09u, 0xAB0Eu},
    {0xAB11u, 0xAB16u},
    {0xAB20u, 0xAB26u},
    {0xAB28u, 0xAB2Eu},
    {0xAB30u, 0xAB6Bu},
    {0xAB70u, 0xABEDu},
    {0xABF0u, 0xABF9u},
    {0xAC00u, 0xD7A3u},
    {0xD7B0u, 0xD7C6u},
    {0xD7CBu, 0xD7FBu},
    {0xD800u, 0xFA6Du},
    {0xFA70u, 0xFAD9u},
    {0xFB00u, 0xFB06u},
    {0xFB13u, 0xFB17u},
    {0xFB1Du, 0xFB36u},
    {0xFB38u, 0xFB3Cu},
    {0xFB3Eu, 0xFB3Eu},
    {0xFB40u, 0xFB41u},
    {0xFB43u, 0xFB44u},
    {0xFB46u, 0xFBC2u},
    {0xFBD3u, 0xFD8Fu},
    {0xFD92u, 0xFDC7u},
    {0xFDCFu, 0xFDCFu},
    {0xFDF0u, 0xFE19u},
    {0xFE20u, 0xFE52u},
    {0xFE54u, 0xFE66u},
    {0xFE68u, 0xFE6Bu},
    {0xFE70u, 0xFE74u},
    {0xFE76u, 0xFEFCu},
    {0xFEFFu, 0xFEFFu},
    {0xFF01u, 0xFFBEu},
    {0xFFC2u, 0xFFC7u},
    {0xFFCAu, 0xFFCFu},
    {0xFFD2u, 0xFFD7u},
    {0xFFDAu, 0xFFDCu},
    {0xFFE0u, 0xFFE6u},
    {0xFFE8u, 0xFFEEu},
    {0xFFF9u, 0xFFFDu} });
  static constexpr auto non_bmp_assigned_ranges = std::to_array<assigned_range_t> ({
    {0x10000u, 0x1000Bu},
    {0x1000Du, 0x10026u},
    {0x10028u, 0x1003Au},
    {0x1003Cu, 0x1003Du},
    {0x1003Fu, 0x1004Du},
    {0x10050u, 0x1005Du},
    {0x10080u, 0x100FAu},
    {0x10100u, 0x10102u},
    {0x10107u, 0x10133u},
    {0x10137u, 0x1018Eu},
    {0x10190u, 0x1019Cu},
    {0x101A0u, 0x101A0u},
    {0x101D0u, 0x101FDu},
    {0x10280u, 0x1029Cu},
    {0x102A0u, 0x102D0u},
    {0x102E0u, 0x102FBu},
    {0x10300u, 0x10323u},
    {0x1032Du, 0x1034Au},
    {0x10350u, 0x1037Au},
    {0x10380u, 0x1039Du},
    {0x1039Fu, 0x103C3u},
    {0x103C8u, 0x103D5u},
    {0x10400u, 0x1049Du},
    {0x104A0u, 0x104A9u},
    {0x104B0u, 0x104D3u},
    {0x104D8u, 0x104FBu},
    {0x10500u, 0x10527u},
    {0x10530u, 0x10563u},
    {0x1056Fu, 0x1057Au},
    {0x1057Cu, 0x1058Au},
    {0x1058Cu, 0x10592u},
    {0x10594u, 0x10595u},
    {0x10597u, 0x105A1u},
    {0x105A3u, 0x105B1u},
    {0x105B3u, 0x105B9u},
    {0x105BBu, 0x105BCu},
    {0x105C0u, 0x105F3u},
    {0x10600u, 0x10736u},
    {0x10740u, 0x10755u},
    {0x10760u, 0x10767u},
    {0x10780u, 0x10785u},
    {0x10787u, 0x107B0u},
    {0x107B2u, 0x107BAu},
    {0x10800u, 0x10805u},
    {0x10808u, 0x10808u},
    {0x1080Au, 0x10835u},
    {0x10837u, 0x10838u},
    {0x1083Cu, 0x1083Cu},
    {0x1083Fu, 0x10855u},
    {0x10857u, 0x1089Eu},
    {0x108A7u, 0x108AFu},
    {0x108E0u, 0x108F2u},
    {0x108F4u, 0x108F5u},
    {0x108FBu, 0x1091Bu},
    {0x1091Fu, 0x10939u},
    {0x1093Fu, 0x1093Fu},
    {0x10980u, 0x109B7u},
    {0x109BCu, 0x109CFu},
    {0x109D2u, 0x10A03u},
    {0x10A05u, 0x10A06u},
    {0x10A0Cu, 0x10A13u},
    {0x10A15u, 0x10A17u},
    {0x10A19u, 0x10A35u},
    {0x10A38u, 0x10A3Au},
    {0x10A3Fu, 0x10A48u},
    {0x10A50u, 0x10A58u},
    {0x10A60u, 0x10A9Fu},
    {0x10AC0u, 0x10AE6u},
    {0x10AEBu, 0x10AF6u},
    {0x10B00u, 0x10B35u},
    {0x10B39u, 0x10B55u},
    {0x10B58u, 0x10B72u},
    {0x10B78u, 0x10B91u},
    {0x10B99u, 0x10B9Cu},
    {0x10BA9u, 0x10BAFu},
    {0x10C00u, 0x10C48u},
    {0x10C80u, 0x10CB2u},
    {0x10CC0u, 0x10CF2u},
    {0x10CFAu, 0x10D27u},
    {0x10D30u, 0x10D39u},
    {0x10D40u, 0x10D65u},
    {0x10D69u, 0x10D85u},
    {0x10D8Eu, 0x10D8Fu},
    {0x10E60u, 0x10E7Eu},
    {0x10E80u, 0x10EA9u},
    {0x10EABu, 0x10EADu},
    {0x10EB0u, 0x10EB1u},
    {0x10EC2u, 0x10EC4u},
    {0x10EFCu, 0x10F27u},
    {0x10F30u, 0x10F59u},
    {0x10F70u, 0x10F89u},
    {0x10FB0u, 0x10FCBu},
    {0x10FE0u, 0x10FF6u},
    {0x11000u, 0x1104Du},
    {0x11052u, 0x11075u},
    {0x1107Fu, 0x110C2u},
    {0x110CDu, 0x110CDu},
    {0x110D0u, 0x110E8u},
    {0x110F0u, 0x110F9u},
    {0x11100u, 0x11134u},
    {0x11136u, 0x11147u},
    {0x11150u, 0x11176u},
    {0x11180u, 0x111DFu},
    {0x111E1u, 0x111F4u},
    {0x11200u, 0x11211u},
    {0x11213u, 0x11241u},
    {0x11280u, 0x11286u},
    {0x11288u, 0x11288u},
    {0x1128Au, 0x1128Du},
    {0x1128Fu, 0x1129Du},
    {0x1129Fu, 0x112A9u},
    {0x112B0u, 0x112EAu},
    {0x112F0u, 0x112F9u},
    {0x11300u, 0x11303u},
    {0x11305u, 0x1130Cu},
    {0x1130Fu, 0x11310u},
    {0x11313u, 0x11328u},
    {0x1132Au, 0x11330u},
    {0x11332u, 0x11333u},
    {0x11335u, 0x11339u},
    {0x1133Bu, 0x11344u},
    {0x11347u, 0x11348u},
    {0x1134Bu, 0x1134Du},
    {0x11350u, 0x11350u},
    {0x11357u, 0x11357u},
    {0x1135Du, 0x11363u},
    {0x11366u, 0x1136Cu},
    {0x11370u, 0x11374u},
    {0x11380u, 0x11389u},
    {0x1138Bu, 0x1138Bu},
    {0x1138Eu, 0x1138Eu},
    {0x11390u, 0x113B5u},
    {0x113B7u, 0x113C0u},
    {0x113C2u, 0x113C2u},
    {0x113C5u, 0x113C5u},
    {0x113C7u, 0x113CAu},
    {0x113CCu, 0x113D5u},
    {0x113D7u, 0x113D8u},
    {0x113E1u, 0x113E2u},
    {0x11400u, 0x1145Bu},
    {0x1145Du, 0x11461u},
    {0x11480u, 0x114C7u},
    {0x114D0u, 0x114D9u},
    {0x11580u, 0x115B5u},
    {0x115B8u, 0x115DDu},
    {0x11600u, 0x11644u},
    {0x11650u, 0x11659u},
    {0x11660u, 0x1166Cu},
    {0x11680u, 0x116B9u},
    {0x116C0u, 0x116C9u},
    {0x116D0u, 0x116E3u},
    {0x11700u, 0x1171Au},
    {0x1171Du, 0x1172Bu},
    {0x11730u, 0x11746u},
    {0x11800u, 0x1183Bu},
    {0x118A0u, 0x118F2u},
    {0x118FFu, 0x11906u},
    {0x11909u, 0x11909u},
    {0x1190Cu, 0x11913u},
    {0x11915u, 0x11916u},
    {0x11918u, 0x11935u},
    {0x11937u, 0x11938u},
    {0x1193Bu, 0x11946u},
    {0x11950u, 0x11959u},
    {0x119A0u, 0x119A7u},
    {0x119AAu, 0x119D7u},
    {0x119DAu, 0x119E4u},
    {0x11A00u, 0x11A47u},
    {0x11A50u, 0x11AA2u},
    {0x11AB0u, 0x11AF8u},
    {0x11B00u, 0x11B09u},
    {0x11BC0u, 0x11BE1u},
    {0x11BF0u, 0x11BF9u},
    {0x11C00u, 0x11C08u},
    {0x11C0Au, 0x11C36u},
    {0x11C38u, 0x11C45u},
    {0x11C50u, 0x11C6Cu},
    {0x11C70u, 0x11C8Fu},
    {0x11C92u, 0x11CA7u},
    {0x11CA9u, 0x11CB6u},
    {0x11D00u, 0x11D06u},
    {0x11D08u, 0x11D09u},
    {0x11D0Bu, 0x11D36u},
    {0x11D3Au, 0x11D3Au},
    {0x11D3Cu, 0x11D3Du},
    {0x11D3Fu, 0x11D47u},
    {0x11D50u, 0x11D59u},
    {0x11D60u, 0x11D65u},
    {0x11D67u, 0x11D68u},
    {0x11D6Au, 0x11D8Eu},
    {0x11D90u, 0x11D91u},
    {0x11D93u, 0x11D98u},
    {0x11DA0u, 0x11DA9u},
    {0x11EE0u, 0x11EF8u},
    {0x11F00u, 0x11F10u},
    {0x11F12u, 0x11F3Au},
    {0x11F3Eu, 0x11F5Au},
    {0x11FB0u, 0x11FB0u},
    {0x11FC0u, 0x11FF1u},
    {0x11FFFu, 0x12399u},
    {0x12400u, 0x1246Eu},
    {0x12470u, 0x12474u},
    {0x12480u, 0x12543u},
    {0x12F90u, 0x12FF2u},
    {0x13000u, 0x13455u},
    {0x13460u, 0x143FAu},
    {0x14400u, 0x14646u},
    {0x16100u, 0x16139u},
    {0x16800u, 0x16A38u},
    {0x16A40u, 0x16A5Eu},
    {0x16A60u, 0x16A69u},
    {0x16A6Eu, 0x16ABEu},
    {0x16AC0u, 0x16AC9u},
    {0x16AD0u, 0x16AEDu},
    {0x16AF0u, 0x16AF5u},
    {0x16B00u, 0x16B45u},
    {0x16B50u, 0x16B59u},
    {0x16B5Bu, 0x16B61u},
    {0x16B63u, 0x16B77u},
    {0x16B7Du, 0x16B8Fu},
    {0x16D40u, 0x16D79u},
    {0x16E40u, 0x16E9Au},
    {0x16F00u, 0x16F4Au},
    {0x16F4Fu, 0x16F87u},
    {0x16F8Fu, 0x16F9Fu},
    {0x16FE0u, 0x16FE4u},
    {0x16FF0u, 0x16FF1u},
    {0x17000u, 0x187F7u},
    {0x18800u, 0x18CD5u},
    {0x18CFFu, 0x18D08u},
    {0x1AFF0u, 0x1AFF3u},
    {0x1AFF5u, 0x1AFFBu},
    {0x1AFFDu, 0x1AFFEu},
    {0x1B000u, 0x1B122u},
    {0x1B132u, 0x1B132u},
    {0x1B150u, 0x1B152u},
    {0x1B155u, 0x1B155u},
    {0x1B164u, 0x1B167u},
    {0x1B170u, 0x1B2FBu},
    {0x1BC00u, 0x1BC6Au},
    {0x1BC70u, 0x1BC7Cu},
    {0x1BC80u, 0x1BC88u},
    {0x1BC90u, 0x1BC99u},
    {0x1BC9Cu, 0x1BCA3u},
    {0x1CC00u, 0x1CCF9u},
    {0x1CD00u, 0x1CEB3u},
    {0x1CF00u, 0x1CF2Du},
    {0x1CF30u, 0x1CF46u},
    {0x1CF50u, 0x1CFC3u},
    {0x1D000u, 0x1D0F5u},
    {0x1D100u, 0x1D126u},
    {0x1D129u, 0x1D1EAu},
    {0x1D200u, 0x1D245u},
    {0x1D2C0u, 0x1D2D3u},
    {0x1D2E0u, 0x1D2F3u},
    {0x1D300u, 0x1D356u},
    {0x1D360u, 0x1D378u},
    {0x1D400u, 0x1D454u},
    {0x1D456u, 0x1D49Cu},
    {0x1D49Eu, 0x1D49Fu},
    {0x1D4A2u, 0x1D4A2u},
    {0x1D4A5u, 0x1D4A6u},
    {0x1D4A9u, 0x1D4ACu},
    {0x1D4AEu, 0x1D4B9u},
    {0x1D4BBu, 0x1D4BBu},
    {0x1D4BDu, 0x1D4C3u},
    {0x1D4C5u, 0x1D505u},
    {0x1D507u, 0x1D50Au},
    {0x1D50Du, 0x1D514u},
    {0x1D516u, 0x1D51Cu},
    {0x1D51Eu, 0x1D539u},
    {0x1D53Bu, 0x1D53Eu},
    {0x1D540u, 0x1D544u},
    {0x1D546u, 0x1D546u},
    {0x1D54Au, 0x1D550u},
    {0x1D552u, 0x1D6A5u},
    {0x1D6A8u, 0x1D7CBu},
    {0x1D7CEu, 0x1DA8Bu},
    {0x1DA9Bu, 0x1DA9Fu},
    {0x1DAA1u, 0x1DAAFu},
    {0x1DF00u, 0x1DF1Eu},
    {0x1DF25u, 0x1DF2Au},
    {0x1E000u, 0x1E006u},
    {0x1E008u, 0x1E018u},
    {0x1E01Bu, 0x1E021u},
    {0x1E023u, 0x1E024u},
    {0x1E026u, 0x1E02Au},
    {0x1E030u, 0x1E06Du},
    {0x1E08Fu, 0x1E08Fu},
    {0x1E100u, 0x1E12Cu},
    {0x1E130u, 0x1E13Du},
    {0x1E140u, 0x1E149u},
    {0x1E14Eu, 0x1E14Fu},
    {0x1E290u, 0x1E2AEu},
    {0x1E2C0u, 0x1E2F9u},
    {0x1E2FFu, 0x1E2FFu},
    {0x1E4D0u, 0x1E4F9u},
    {0x1E5D0u, 0x1E5FAu},
    {0x1E5FFu, 0x1E5FFu},
    {0x1E7E0u, 0x1E7E6u},
    {0x1E7E8u, 0x1E7EBu},
    {0x1E7EDu, 0x1E7EEu},
    {0x1E7F0u, 0x1E7FEu},
    {0x1E800u, 0x1E8C4u},
    {0x1E8C7u, 0x1E8D6u},
    {0x1E900u, 0x1E94Bu},
    {0x1E950u, 0x1E959u},
    {0x1E95Eu, 0x1E95Fu},
    {0x1EC71u, 0x1ECB4u},
    {0x1ED01u, 0x1ED3Du},
    {0x1EE00u, 0x1EE03u},
    {0x1EE05u, 0x1EE1Fu},
    {0x1EE21u, 0x1EE22u},
    {0x1EE24u, 0x1EE24u},
    {0x1EE27u, 0x1EE27u},
    {0x1EE29u, 0x1EE32u},
    {0x1EE34u, 0x1EE37u},
    {0x1EE39u, 0x1EE39u},
    {0x1EE3Bu, 0x1EE3Bu},
    {0x1EE42u, 0x1EE42u},
    {0x1EE47u, 0x1EE47u},
    {0x1EE49u, 0x1EE49u},
    {0x1EE4Bu, 0x1EE4Bu},
    {0x1EE4Du, 0x1EE4Fu},
    {0x1EE51u, 0x1EE52u},
    {0x1EE54u, 0x1EE54u},
    {0x1EE57u, 0x1EE57u},
    {0x1EE59u, 0x1EE59u},
    {0x1EE5Bu, 0x1EE5Bu},
    {0x1EE5Du, 0x1EE5Du},
    {0x1EE5Fu, 0x1EE5Fu},
    {0x1EE61u, 0x1EE62u},
    {0x1EE64u, 0x1EE64u},
    {0x1EE67u, 0x1EE6Au},
    {0x1EE6Cu, 0x1EE72u},
    {0x1EE74u, 0x1EE77u},
    {0x1EE79u, 0x1EE7Cu},
    {0x1EE7Eu, 0x1EE7Eu},
    {0x1EE80u, 0x1EE89u},
    {0x1EE8Bu, 0x1EE9Bu},
    {0x1EEA1u, 0x1EEA3u},
    {0x1EEA5u, 0x1EEA9u},
    {0x1EEABu, 0x1EEBBu},
    {0x1EEF0u, 0x1EEF1u},
    {0x1F000u, 0x1F02Bu},
    {0x1F030u, 0x1F093u},
    {0x1F0A0u, 0x1F0AEu},
    {0x1F0B1u, 0x1F0BFu},
    {0x1F0C1u, 0x1F0CFu},
    {0x1F0D1u, 0x1F0F5u},
    {0x1F100u, 0x1F1ADu},
    {0x1F1E6u, 0x1F202u},
    {0x1F210u, 0x1F23Bu},
    {0x1F240u, 0x1F248u},
    {0x1F250u, 0x1F251u},
    {0x1F260u, 0x1F265u},
    {0x1F300u, 0x1F6D7u},
    {0x1F6DCu, 0x1F6ECu},
    {0x1F6F0u, 0x1F6FCu},
    {0x1F700u, 0x1F776u},
    {0x1F77Bu, 0x1F7D9u},
    {0x1F7E0u, 0x1F7EBu},
    {0x1F7F0u, 0x1F7F0u},
    {0x1F800u, 0x1F80Bu},
    {0x1F810u, 0x1F847u},
    {0x1F850u, 0x1F859u},
    {0x1F860u, 0x1F887u},
    {0x1F890u, 0x1F8ADu},
    {0x1F8B0u, 0x1F8BBu},
    {0x1F8C0u, 0x1F8C1u},
    {0x1F900u, 0x1FA53u},
    {0x1FA60u, 0x1FA6Du},
    {0x1FA70u, 0x1FA7Cu},
    {0x1FA80u, 0x1FA89u},
    {0x1FA8Fu, 0x1FAC6u},
    {0x1FACEu, 0x1FADCu},
    {0x1FADFu, 0x1FAE9u},
    {0x1FAF0u, 0x1FAF8u},
    {0x1FB00u, 0x1FB92u},
    {0x1FB94u, 0x1FBF9u},
    {0x20000u, 0x2A6DFu},
    {0x2A700u, 0x2B739u},
    {0x2B740u, 0x2B81Du},
    {0x2B820u, 0x2CEA1u},
    {0x2CEB0u, 0x2EBE0u},
    {0x2EBF0u, 0x2EE5Du},
    {0x2F800u, 0x2FA1Du},
    {0x30000u, 0x3134Au},
    {0x31350u, 0x323AFu},
    {0xE0001u, 0xE0001u},
    {0xE0020u, 0xE007Fu},
    {0xE0100u, 0xE01EFu},
    {0xF0000u, 0xFFFFDu},
    {0x100000u, 0x10FFFDu} });
  static constexpr surrogate_range_t high_surrogate_range = { 0xD800u, 0xDBFFu };
  static constexpr surrogate_range_t low_surrogate_range = { 0xDC00u, 0xDFFFu };
};

class utf8
{
public:
  using char_type = char8_t;
  static constexpr std::size_t from_continuation_byte = 0;

public:
  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr std::size_t
    front_mblen (R &&seq) noexcept
    {
      if (std::ranges::empty (seq))
        return 0;

      auto const trivial_mblen = trivial_mblen_from_unit (*std::ranges::cbegin (seq));
      if (0 == trivial_mblen || std::ranges::size (seq) < trivial_mblen)
        return 0;

      char32_t code_point = extract_bits_from_code_unit (*std::ranges::cbegin (seq), trivial_mblen);
      auto current = std::ranges::cbegin (seq);
      for (std::size_t i = 0; i < trivial_mblen - 1; ++i)
        {
          std::ranges::advance (current, 1);
          if (is_continuation_unit (*current))
            code_point += extract_bits_from_code_unit (*current, from_continuation_byte);
          else
            return 0;
        }

      // As a matter of fact we can use different tables for characters of
      //   different multibyte lengths.
      // But I'm currently being lazy so let's use UTF-32's table.
      if (char_db::utf32::is_valid_char (std::views::single (code_point)))
        return trivial_mblen;
      else
        return 0;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr bool
    starts_with_valid_char (R &&seq) noexcept
    {
      if (0 == front_mblen (std::forward<R> (seq)))
        return false;
      else
        return true;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr bool
    validate_char_sequence (R &&seq) noexcept
    {
      auto const sentinel = std::ranges::cend (seq);
      auto current = std::ranges::cbegin (seq);

      for (auto mblen = front_mblen (seq);
           0 != mblen;
           mblen = front_mblen (std::ranges::subrange (current, sentinel)))
        std::ranges::advance (current, mblen);

      if (current != sentinel)
        return false;
      else
        return true;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr bool
    is_valid_char (R &&seq) noexcept
    {
      if (std::ranges::empty (seq))
        return false;

      auto const trivial_mblen = trivial_mblen_from_unit (*std::ranges::cbegin (seq));
      if (std::ranges::size (seq) != trivial_mblen)
        return false;

      char32_t code_point = extract_bits_from_code_unit (*std::ranges::cbegin (seq), trivial_mblen);
      auto current = std::ranges::cbegin (seq);
      for (std::size_t i = 0; i < trivial_mblen - 1; ++i)
        {
          std::ranges::advance (current, 1);
          if (is_continuation_unit (*current))
            code_point += extract_bits_from_code_unit (*current, from_continuation_byte);
          else
            return false;
        }

      // As a matter of fact we can use different tables for characters of
      //   different multibyte lengths.
      // But I'm currently being lazy so let's use UTF-32's table.
      if (char_db::utf32::is_valid_char (std::views::single (code_point)))
        return true;
      else
        return false;
    }

  template <std::ranges::input_range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr char32_t
    to_code_point (R &&seq) noexcept
    // pre (is_valid_char (seq))
    {
      auto const trivial_mblen = trivial_mblen_from_unit (*std::ranges::cbegin (seq));

      char32_t code_point = extract_bits_from_code_unit (*std::ranges::cbegin (seq), trivial_mblen);

      auto current = std::ranges::cbegin (seq);
      for (std::size_t i = 0; i < trivial_mblen - 1; ++i)
        {
          std::ranges::advance (current, 1);
          code_point <<= 6;
          code_point |= extract_bits_from_code_unit (*current, from_continuation_byte);
        }

      return code_point;
    }

  template <std::ranges::range R>
  requires std::same_as<char_type, std::ranges::range_value_t<R>>
    static constexpr R
    code_point_to (char32_t const code_point) noexcept
    // precondition: `code_point` is a valid Unicode code point convertible to
    //               a UTF-8 representation
    {
      // Gemini wrote this branchless logic. I believe in them. They're much
      // smarter than me, you know.

      std::size_t const len = 1 + (code_point > 0x7FU) + (code_point > 0x7FFU) + (code_point > 0xFFFFU);

      std::array<char8_t, 4> result_bytes {};

      result_bytes[0] = static_cast<char8_t>(
        ((len == 1) * (code_point & 0x7FU))
        | ((len == 2) * (0xC0U | ((code_point >> 6) & 0x1FU)))
        | ((len == 3) * (0xE0U | ((code_point >> 12) & 0x0FU)))
        | ((len == 4) * (0xF0U | ((code_point >> 18) & 0x07U))) );

      result_bytes[1] = static_cast<char8_t>(
        (len >= 2)
        * (0x80U
           | (((len == 2) * (code_point & 0x3FU))
              | ((len == 3) * ((code_point >> 6) & 0x3FU))
              | ((len == 4) * ((code_point >> 12) & 0x3FU)) )));

      result_bytes[2] = static_cast<char8_t>(
        (len >= 3)
        * (0x80U
           | (((len == 3) * (code_point & 0x3FU))
              | ((len == 4) * ((code_point >> 6) & 0x3FU)) )));

      result_bytes[3] = static_cast<char8_t>(
        (len == 4) * (0x80U | (code_point & 0x3FU)) );

      return std::ranges::to<R> (result_bytes | std::views::take (len));
    }

  //== UTF-8 specific operations ==//

  static constexpr std::size_t
  trivial_mblen_from_unit (char8_t const unit) noexcept
  {
    if (unit <= 0x7F)
      return 1;
    if (0xC2 <= unit && unit <= 0xDF)
      return 2;
    if (0xE0 <= unit && unit <= 0xEF)
      return 3;
    if (0xF0 <= unit && unit <= 0xF4)
      return 4;
    return 0;
  }

  static constexpr char32_t
  extract_bits_from_code_unit (char8_t const code_unit,
                               std::size_t const trivial_mblen) noexcept
  {
    switch (trivial_mblen)
      {
      case from_continuation_byte:
        return code_unit & 0x3F;
      case 1:
        return code_unit & 0x7F;
      case 2:
        return code_unit & 0x1F;
      case 3:
        return code_unit & 0x0F;
      case 4:
        return code_unit & 0x07;
      default:
        std::unreachable ();
      }
  }

  static constexpr bool
  is_continuation_unit (char8_t const code_unit) noexcept
  {
    return (code_unit & 0xC0) == 0x80;
  }
};

} // namespace char_db